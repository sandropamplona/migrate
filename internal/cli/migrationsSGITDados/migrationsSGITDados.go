// Code generated by go-bindata.
// sources:
// 0000001_SW-9001.001.down.sql
// 0000001_SW-9001.001.up.sql
// 0000002_SW-9002.001.down.sql
// 0000002_SW-9002.001.up.sql
// DO NOT EDIT!

package migrationsSGITDados

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var __0000001_sw9001001DownSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func _0000001_sw9001001DownSqlBytes() ([]byte, error) {
	return bindataRead(
		__0000001_sw9001001DownSql,
		"0000001_SW-9001.001.down.sql",
	)
}

func _0000001_sw9001001DownSql() (*asset, error) {
	bytes, err := _0000001_sw9001001DownSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "0000001_SW-9001.001.down.sql", size: 0, mode: os.FileMode(420), modTime: time.Unix(1665233647, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var __0000001_sw9001001UpSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\x8e\xb1\x4a\x03\x41\x10\x86\xfb\x7b\x8a\xbf\x10\x26\xb1\x90\xd8\x09\x62\x71\xb7\xf9\x63\x16\x73\xbb\x72\x33\xe2\x76\x87\x24\x5b\xa4\xf1\x44\x53\xe4\x7d\x2c\x7c\x90\xbc\x98\xe4\xc4\x83\x84\x23\x3f\x0c\xcc\x30\x3f\x1f\x1f\x13\xdd\x8b\x11\xd5\x2a\xba\xa7\xa2\xd4\xa2\xe2\xa3\x0f\x05\x00\xbf\xc0\x24\x44\x03\x93\x57\xd3\x89\x72\x45\x67\xb8\x3e\xbe\xce\xb2\x68\x62\x8d\x66\x5e\x5d\x31\x39\x3e\x9b\x8f\x41\x47\x5a\xaf\x4b\x36\x3c\xab\xdd\x9c\x9c\x6d\x28\x6b\xe2\x01\xc2\xe4\x5a\xa3\x1a\xdb\xd9\xdd\xed\x4c\xa6\x53\xd8\x92\xbd\x14\x06\xbd\x3e\xff\xf6\x6a\xa5\xb1\x66\x30\x88\x6b\x58\x1a\x31\x40\x71\x0a\x83\x88\xe5\xfd\xae\xc3\xe6\x0d\x79\xbf\xce\x1f\xbb\x6d\xf7\x2e\x22\xf7\x17\x99\xb1\xee\x97\x3f\xda\x38\xd7\x2b\x44\x36\xf9\x6b\xfd\xb9\x3d\xfc\x1c\xbe\xbb\x81\xc9\x30\x2f\x8e\xf3\x1b\x00\x00\xff\xff\x6c\x36\x22\x92\x6a\x01\x00\x00")

func _0000001_sw9001001UpSqlBytes() ([]byte, error) {
	return bindataRead(
		__0000001_sw9001001UpSql,
		"0000001_SW-9001.001.up.sql",
	)
}

func _0000001_sw9001001UpSql() (*asset, error) {
	bytes, err := _0000001_sw9001001UpSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "0000001_SW-9001.001.up.sql", size: 362, mode: os.FileMode(420), modTime: time.Unix(1665234448, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var __0000002_sw9002001DownSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func _0000002_sw9002001DownSqlBytes() ([]byte, error) {
	return bindataRead(
		__0000002_sw9002001DownSql,
		"0000002_SW-9002.001.down.sql",
	)
}

func _0000002_sw9002001DownSql() (*asset, error) {
	bytes, err := _0000002_sw9002001DownSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "0000002_SW-9002.001.down.sql", size: 0, mode: os.FileMode(420), modTime: time.Unix(1665235963, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var __0000002_sw9002001UpSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\x91\xcd\x6a\xdc\x40\x10\x84\xef\x7a\x8a\x3a\x04\x76\x15\x42\x90\x0f\x01\x43\xf0\xa1\x67\xa6\xa4\x1d\x3c\x3f\x72\x4f\xcb\xf6\xe6\xa2\xf7\x7f\x8b\x20\x39\xce\xae\xcd\xe2\x86\x39\xd5\xd7\xdd\x55\x3d\x7c\xa5\x5f\x8c\x70\xa9\xfa\xc7\x4e\x5a\xe7\x38\xc5\xd2\x01\x88\x23\x8e\xa5\x1a\xf8\x1a\x9b\xb5\x63\x63\xa2\x37\x7c\xdf\xa4\x4f\x35\x6a\xcd\xd0\xe0\xbe\x29\x93\x58\xac\xa5\x41\x6f\x60\x2f\x27\x2a\xa1\x3f\xaf\xc9\xb5\x48\x26\x1e\x70\xf0\xc1\xc4\x25\xae\xc3\xfd\xdd\x70\x80\x94\x70\x63\xc0\x5b\xbd\x0d\x68\xe7\x66\xcc\xeb\x98\x64\xc2\x03\x06\xf4\x3d\xec\xc4\xdd\xf8\xff\x04\x7b\xbd\x07\x6c\x26\xc6\xcc\x62\x38\x78\xa5\x18\xb1\x2f\xc4\xf5\x62\x1c\xf7\x36\x1f\xcc\xa5\xaa\x93\x54\xc4\x62\x9c\xa8\xd8\x0e\x51\x96\x94\x7e\x5c\x80\xb2\x64\xea\x97\x44\xb0\x93\xc6\x3c\x57\x35\xf1\x52\x61\x31\xb3\x99\xe4\x19\x81\xa3\x2c\xc9\xe0\x17\x55\x16\x5b\x2f\xca\xad\x3d\x35\x53\xf4\x69\x89\xcf\x15\xcf\xa2\xfe\x24\x7a\xbc\x1b\x86\xfe\x16\x3b\x89\xf1\x45\xce\xb3\x4c\xb2\x45\xbd\x34\xfc\x1a\xfa\x0f\xc6\x62\x89\x3e\x4a\x52\x4e\xb1\x99\xd6\x86\x20\xc6\x0f\xc4\x18\xcb\x17\xfa\x93\x05\x5e\xc4\x7f\x37\xb8\xd2\xdd\xe3\xfc\xee\xd9\xa5\xea\xd0\x16\xb7\xda\x79\x26\x06\x34\x4e\xfb\x37\xb4\xf8\x87\xb8\x1f\xba\xfe\xf0\x7b\xeb\x63\x09\xdd\xf6\xfe\x06\x00\x00\xff\xff\xbf\xea\xde\xaf\x91\x02\x00\x00")

func _0000002_sw9002001UpSqlBytes() ([]byte, error) {
	return bindataRead(
		__0000002_sw9002001UpSql,
		"0000002_SW-9002.001.up.sql",
	)
}

func _0000002_sw9002001UpSql() (*asset, error) {
	bytes, err := _0000002_sw9002001UpSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "0000002_SW-9002.001.up.sql", size: 657, mode: os.FileMode(420), modTime: time.Unix(1665236044, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"0000001_SW-9001.001.down.sql": _0000001_sw9001001DownSql,
	"0000001_SW-9001.001.up.sql": _0000001_sw9001001UpSql,
	"0000002_SW-9002.001.down.sql": _0000002_sw9002001DownSql,
	"0000002_SW-9002.001.up.sql": _0000002_sw9002001UpSql,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"0000001_SW-9001.001.down.sql": &bintree{_0000001_sw9001001DownSql, map[string]*bintree{}},
	"0000001_SW-9001.001.up.sql": &bintree{_0000001_sw9001001UpSql, map[string]*bintree{}},
	"0000002_SW-9002.001.down.sql": &bintree{_0000002_sw9002001DownSql, map[string]*bintree{}},
	"0000002_SW-9002.001.up.sql": &bintree{_0000002_sw9002001UpSql, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

