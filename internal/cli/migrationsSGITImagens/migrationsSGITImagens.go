// Code generated by go-bindata.
// sources:
// 0000001_SW-9101.001.down.sql
// 0000001_SW-9101.001.up.sql
// 20221015112143_SW-9103.001.down.sql
// 20221015112143_SW-9103.001.up.sql
// 20221015112233_SW-9104.001.down.sql
// 20221015112233_SW-9104.001.up.sql
// 20221015112239_SW-9105.001.down.sql
// 20221015112239_SW-9105.001.up.sql
// DO NOT EDIT!

package migrationsSGITImagens

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var __0000001_sw9101001DownSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func _0000001_sw9101001DownSqlBytes() ([]byte, error) {
	return bindataRead(
		__0000001_sw9101001DownSql,
		"0000001_SW-9101.001.down.sql",
	)
}

func _0000001_sw9101001DownSql() (*asset, error) {
	bytes, err := _0000001_sw9101001DownSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "0000001_SW-9101.001.down.sql", size: 0, mode: os.FileMode(420), modTime: time.Unix(1665234540, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var __0000001_sw9101001UpSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\x8e\xb1\x4a\x03\x41\x10\x86\xfb\x7b\x8a\xbf\x10\x26\xb1\x90\xd8\x09\x62\x71\xb7\xf9\x63\x16\x73\xbb\x72\x33\xe2\x76\x87\x24\x5b\xa4\xf1\x44\x53\xe4\x7d\x2c\x7c\x90\xbc\x98\xe4\xc4\x83\x84\x23\x3f\x0c\xcc\x30\x3f\x1f\x1f\x13\xdd\x8b\x11\xd5\x2a\xba\xa7\xa2\xd4\xa2\xe2\xa3\x0f\x05\x00\xbf\xc0\x24\x44\x03\x93\x57\xd3\x89\x72\x45\x67\xb8\x3e\xbe\xce\xb2\x68\x62\x8d\x66\x5e\x5d\x31\x39\x3e\x9b\x8f\x41\x47\x5a\xaf\x4b\x36\x3c\xab\xdd\x9c\x9c\x6d\x28\x6b\xe2\x01\xc2\xe4\x5a\xa3\x1a\xdb\xd9\xdd\xed\x4c\xa6\x53\xd8\x92\xbd\x14\x06\xbd\x3e\xff\xf6\x6a\xa5\xb1\x66\x30\x88\x6b\x58\x1a\x31\x40\x71\x0a\x83\x88\xe5\xfd\xae\xc3\xe6\x0d\x79\xbf\xce\x1f\xbb\x6d\xf7\x2e\x22\xf7\x17\x99\xb1\xee\x97\x3f\xda\x38\xd7\x2b\x44\x36\xf9\x6b\xfd\xb9\x3d\xfc\x1c\xbe\xbb\x81\xc9\x30\x2f\x8e\xf3\x1b\x00\x00\xff\xff\x6c\x36\x22\x92\x6a\x01\x00\x00")

func _0000001_sw9101001UpSqlBytes() ([]byte, error) {
	return bindataRead(
		__0000001_sw9101001UpSql,
		"0000001_SW-9101.001.up.sql",
	)
}

func _0000001_sw9101001UpSql() (*asset, error) {
	bytes, err := _0000001_sw9101001UpSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "0000001_SW-9101.001.up.sql", size: 362, mode: os.FileMode(420), modTime: time.Unix(1665234677, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var __20221015112143_sw9103001DownSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func _20221015112143_sw9103001DownSqlBytes() ([]byte, error) {
	return bindataRead(
		__20221015112143_sw9103001DownSql,
		"20221015112143_SW-9103.001.down.sql",
	)
}

func _20221015112143_sw9103001DownSql() (*asset, error) {
	bytes, err := _20221015112143_sw9103001DownSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "20221015112143_SW-9103.001.down.sql", size: 0, mode: os.FileMode(420), modTime: time.Unix(1665843703, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var __20221015112143_sw9103001UpSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func _20221015112143_sw9103001UpSqlBytes() ([]byte, error) {
	return bindataRead(
		__20221015112143_sw9103001UpSql,
		"20221015112143_SW-9103.001.up.sql",
	)
}

func _20221015112143_sw9103001UpSql() (*asset, error) {
	bytes, err := _20221015112143_sw9103001UpSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "20221015112143_SW-9103.001.up.sql", size: 0, mode: os.FileMode(420), modTime: time.Unix(1665843703, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var __20221015112233_sw9104001DownSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func _20221015112233_sw9104001DownSqlBytes() ([]byte, error) {
	return bindataRead(
		__20221015112233_sw9104001DownSql,
		"20221015112233_SW-9104.001.down.sql",
	)
}

func _20221015112233_sw9104001DownSql() (*asset, error) {
	bytes, err := _20221015112233_sw9104001DownSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "20221015112233_SW-9104.001.down.sql", size: 0, mode: os.FileMode(420), modTime: time.Unix(1665843753, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var __20221015112233_sw9104001UpSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func _20221015112233_sw9104001UpSqlBytes() ([]byte, error) {
	return bindataRead(
		__20221015112233_sw9104001UpSql,
		"20221015112233_SW-9104.001.up.sql",
	)
}

func _20221015112233_sw9104001UpSql() (*asset, error) {
	bytes, err := _20221015112233_sw9104001UpSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "20221015112233_SW-9104.001.up.sql", size: 0, mode: os.FileMode(420), modTime: time.Unix(1665843753, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var __20221015112239_sw9105001DownSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func _20221015112239_sw9105001DownSqlBytes() ([]byte, error) {
	return bindataRead(
		__20221015112239_sw9105001DownSql,
		"20221015112239_SW-9105.001.down.sql",
	)
}

func _20221015112239_sw9105001DownSql() (*asset, error) {
	bytes, err := _20221015112239_sw9105001DownSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "20221015112239_SW-9105.001.down.sql", size: 0, mode: os.FileMode(420), modTime: time.Unix(1665843759, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var __20221015112239_sw9105001UpSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func _20221015112239_sw9105001UpSqlBytes() ([]byte, error) {
	return bindataRead(
		__20221015112239_sw9105001UpSql,
		"20221015112239_SW-9105.001.up.sql",
	)
}

func _20221015112239_sw9105001UpSql() (*asset, error) {
	bytes, err := _20221015112239_sw9105001UpSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "20221015112239_SW-9105.001.up.sql", size: 0, mode: os.FileMode(420), modTime: time.Unix(1665843759, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"0000001_SW-9101.001.down.sql": _0000001_sw9101001DownSql,
	"0000001_SW-9101.001.up.sql": _0000001_sw9101001UpSql,
	"20221015112143_SW-9103.001.down.sql": _20221015112143_sw9103001DownSql,
	"20221015112143_SW-9103.001.up.sql": _20221015112143_sw9103001UpSql,
	"20221015112233_SW-9104.001.down.sql": _20221015112233_sw9104001DownSql,
	"20221015112233_SW-9104.001.up.sql": _20221015112233_sw9104001UpSql,
	"20221015112239_SW-9105.001.down.sql": _20221015112239_sw9105001DownSql,
	"20221015112239_SW-9105.001.up.sql": _20221015112239_sw9105001UpSql,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"0000001_SW-9101.001.down.sql": &bintree{_0000001_sw9101001DownSql, map[string]*bintree{}},
	"0000001_SW-9101.001.up.sql": &bintree{_0000001_sw9101001UpSql, map[string]*bintree{}},
	"20221015112143_SW-9103.001.down.sql": &bintree{_20221015112143_sw9103001DownSql, map[string]*bintree{}},
	"20221015112143_SW-9103.001.up.sql": &bintree{_20221015112143_sw9103001UpSql, map[string]*bintree{}},
	"20221015112233_SW-9104.001.down.sql": &bintree{_20221015112233_sw9104001DownSql, map[string]*bintree{}},
	"20221015112233_SW-9104.001.up.sql": &bintree{_20221015112233_sw9104001UpSql, map[string]*bintree{}},
	"20221015112239_SW-9105.001.down.sql": &bintree{_20221015112239_sw9105001DownSql, map[string]*bintree{}},
	"20221015112239_SW-9105.001.up.sql": &bintree{_20221015112239_sw9105001UpSql, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

